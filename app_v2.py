import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import pyreadstat
import seaborn as sns
import streamlit as st
import tempfile
import re

from matplotlib.font_manager import FontProperties # –¥–ª—è —à—Ä–∏—Ñ—Ç–æ–≤
from matplotlib.colors import LinearSegmentedColormap # –¥–ª—è —Ü–≤–µ—Ç–æ–≤
from matplotlib.ticker import PercentFormatter
from math import log2
from os.path import commonprefix
from scipy.stats import chi2_contingency
from statsmodels.stats.multitest import multipletests
from statsmodels.stats.proportion import proportions_ztest
from scipy.stats import norm
from typing import Dict

st.title("üìä –ê–Ω–∞–ª–∏–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ SAV —Ñ–∞–π–ª (SPSS)", type="sav")

if uploaded_file:
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix=".sav") as tmp:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            tmp.write(uploaded_file.getvalue())
            tmp_path = tmp.name

        # –ß–∏—Ç–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        df, meta = pyreadstat.read_sav(tmp_path)
        df = df.drop_duplicates()
        n_resp = len(df)
        st.success(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –ó–∞–ø–∏—Å–µ–π: {n_resp}")

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        import os
        os.unlink(tmp_path)

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤
        numeric_cols = df.select_dtypes(include=['number']).columns
        list_of_questions = []
        for key in numeric_cols:
          if meta.column_names_to_labels[key] in list_of_questions:
            continue
          else:
            list_of_questions.append(meta.column_names_to_labels[key])
        meta_inside_out = {}
        for question in list_of_questions:
          for key in meta.column_names_to_labels:
            if meta.column_names_to_labels[key] == question:
              meta_inside_out[question] = key
              break

        if len(list_of_questions) == 0:
            st.error("–í —Ñ–∞–π–ª–µ –Ω–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        else:
            question = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è", list_of_questions)
            col = meta_inside_out[question]

            def classify_question_optimized(col, keywords=None):
                if keywords is None:
                    keywords = ["—à–∫–∞–ª", "–Ω–∞—Å–∫–æ–ª—å–∫–æ", "–æ—Ü–µ–Ω", "—Å—Ç–µ–ø–µ–Ω—å", "–±–∞–ª–ª", "—É—Ä–æ–≤–µ–Ω—å"]
                question_text = meta.column_names_to_labels.get(col, "").lower()
                answer_labels = meta.variable_value_labels.get(col, {})
                answer_count = len(answer_labels)
                keyword_match = any(keyword in question_text for keyword in keywords)
                if keyword_match:
                  return "–®–∫–∞–ª—å–Ω—ã–π"
                else:
                    return "–ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–π"

            unique_answers = df[col].nunique()
            question_type = classify_question_optimized(col)
            if col not in meta.variable_value_labels and unique_answers > 15\
            and question_type != "–®–∫–∞–ª—å–Ω—ã–π":
              vis_type = '–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞'
            elif unique_answers == 2:
              vis_type = "–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞";
            elif question_type == "–®–∫–∞–ª—å–Ω—ã–π":
              vis_type = "–°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞"
            elif question_type != "–®–∫–∞–ª—å–Ω—ã–π":
              vis_type = "–°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π"
            vis_list = ["–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞", "–°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞", "–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞", "–°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π", "–î–∏–∞–≥—Ä–∞–º–º–∞ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π"]
            vis_list.remove(vis_type)
            vis_list.insert(0, vis_type)
            vis_type = st.selectbox("–¢–∏–ø –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏", vis_list)
            if vis_type == "–î–∏–∞–≥—Ä–∞–º–º–∞ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π":
              table_columns_text = st.multiselect(
                  '–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π',
                  list_of_questions,
                  default=[question]
                  )
              table_columns = []
              for question in table_columns_text:
                col = meta_inside_out[question]
                table_columns.append(col)

            def is_multi_response(col):
              '''
              –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–æ–ø—Ä–æ—Å —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º (True) –∏–ª–∏ –Ω–µ—Ç (False)
              '''
              if '_' in col:
                prefix = col.split('_')[0]
                matching_keys = [key for key in meta.column_names_to_labels if key.startswith(prefix)]
                matching_labels = set(meta.column_names_to_labels[key] for key in matching_keys)
                return len(matching_keys) > 1 and len(matching_labels) == 1
              return False

            def process_multi_response_1(col):
              '''
              –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å—Ç–æ–ª–±—Ü—ã –≤ –≤–æ–ø—Ä–æ—Å–∞—Ö —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º –æ—Ç–≤–µ—Ç–∞ (–¥–ª—è 1 –≤–æ–ø—Ä–æ—Å–∞)
              '''
              if is_multi_response(col):
                data = pd.DataFrame()
                question = meta.column_names_to_labels[col]
                for key in meta.column_names_to_labels:
                  if meta.column_names_to_labels[key] == question:
                    data = pd.concat([data, df[key]],ignore_index=True)
              else:
                data = df[col]
              return(data)

            def process_multi_response(col1, col2):
              '''
              –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å—Ç–æ–ª–±—Ü—ã –≤ –≤–æ–ø—Ä–æ—Å–∞—Ö —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º –æ—Ç–≤–µ—Ç–æ–≤
              '''
              data = pd.DataFrame()
              if is_multi_response(col1) and is_multi_response(col2):
                  raise KeyError('–ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ 2 –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏')
              elif is_multi_response(col1) and not is_multi_response(col2) :
                  for i in [key for key in meta.column_names_to_labels.keys() if key.__contains__(col1.split('_')[0])]:
                      fict_df = df[[col2, i]]
                      fict_df.columns = [col2, col1]
                      data = pd.concat([data, fict_df], ignore_index=True)
              elif not is_multi_response(col1) and is_multi_response(col2):
                  for i in [key for key in meta.column_names_to_labels.keys() if key.__contains__(col2.split('_')[0])]:
                      fict_df = df[[col1, i]]
                      fict_df.columns = [col1, col2]
                      data = pd.concat([data, fict_df], ignore_index=True)
              else:
                  data = df[[col1, col2]]
              return data

            def unify_questions(labels_dict: Dict[str, str]) -> Dict[str, str]:
                """
                –£–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ —á–∏—Å–ª–æ–≤—ã–º–∏ –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏.
                –ù–∞–ø—Ä–∏–º–µ—Ä, –≤–æ–ø—Ä–æ—Å—ã —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏ "13.–ê.", "13.–ë." –ø–æ–ª—É—á–∞—Ç —Ç–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.
                """
                # –°–Ω–∞—á–∞–ª–∞ –∏–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "13" –∏–∑ "13.–ê.")
                prefix_to_text = {}
                for col, label in labels_dict.items():
                    match = re.search(r'^(\d+)', label)  # –ò—â–µ–º —Ü–∏—Ñ—Ä—ã –≤ –Ω–∞—á–∞–ª–µ
                    if match:
                        prefix = match.group(1)
                        if prefix not in prefix_to_text:
                            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–µ—Ä–≤—ã–π –≤—Å—Ç—Ä–µ—Ç–∏–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞
                            prefix_to_text[prefix] = label

                # –ó–∞–º–µ–Ω—è–µ–º –º–µ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏
                unified = {}
                for col, label in labels_dict.items():
                    match = re.search(r'^(\d+)', label)
                    if match:
                        prefix = match.group(1)
                        if prefix in prefix_to_text:
                            unified[col] = prefix_to_text[prefix]
                    else:
                        unified[col] = label
                return unified

            def remove_prefixes(labels_dict: Dict[str, str]) -> Dict[str, str]:
                """
                –£–¥–∞–ª—è–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å—ã –≤–∏–¥–∞ "SEX.", "1.", "Q1." –∏–∑ –º–µ—Ç–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤.
                """
                cleaned = {}
                for col, label in labels_dict.items():
                    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã —Ç–∏–ø–∞ "SEX.", "1.", "Q1.", "13.–ê." –∏ —Ç.–¥.
                    cleaned_label = re.sub(r'^([a-zA-Z–∞-—è–ê-–Ø0-9]+\.\s*)+', '', label)
                    cleaned[col] = cleaned_label.strip()
                return cleaned

            def clean_question_labels(meta, mode: str = 'both'):
                """
                –ó–ê–ú–ï–ù–Ø–ï–¢ –∏—Å—Ö–æ–¥–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ DataFrame –Ω–∞ –æ—á–∏—â–µ–Ω–Ω—ã–µ.
                –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
                    meta: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω)
                    mode: 'prefix' - —Ç–æ–ª—å–∫–æ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤,
                          'unify' - —Ç–æ–ª—å–∫–æ —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è,
                          'both' - –æ–±–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
                """
                labels = meta.column_names_to_labels.copy()
                if mode in ('unify', 'both'):
                    labels = unify_questions(labels)
                if mode in ('prefix', 'both'):
                    labels = remove_prefixes(labels)
                meta.column_names_to_labels = labels

            def clean_value_labels(meta):
                """
                –ó–ê–ú–ï–ù–Ø–ï–¢ –∏—Å—Ö–æ–¥–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–æ–≤ –≤ DataFrame –Ω–∞ –æ—á–∏—â–µ–Ω–Ω—ã–µ –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π ‚â•90 (—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤).
                –ü—Ä–∞–≤–∏–ª–∞ –∑–∞–º–µ–Ω—ã:
                    - –£–¥–∞–ª—è–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å—ã –≤–∏–¥–∞ '(–ó–ê–ß–ò–¢–ê–¢–¨ –ü–û–°–õ–ï –ü–ê–£–ó–´)', '(–ù–ï –ó–ê–ß–ò–¢–´–í–ê–¢–¨)' –∏ —Ç.–ø.
                    - –û—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–æ '–î—Ä—É–≥–æ–µ', —É–¥–∞–ª—è—è –≤—Å—ë –ø–æ—Å–ª–µ –Ω–µ–≥–æ
                """
                replacement_rules = {
                    r'\([^)]+\)\s*': '',  # –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–∫–æ–±–æ—á–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã
                    r'(–î—Ä—É–≥–æ–µ).*': r'\1' # –û—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ "–î—Ä—É–≥–æ–µ"
                }
                for var_name, value_labels in meta.variable_value_labels.items():
                    updated_labels = {}
                    for value, label in value_labels.items():
                        if isinstance(value, (int, float)) and value >= 90: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç
                            new_label = label
                            for pattern, repl in replacement_rules.items():
                                new_label = re.sub(pattern, repl, new_label)
                            updated_labels[value] = new_label.strip()
                        else:
                            updated_labels[value] = label
                    meta.variable_value_labels[var_name] = updated_labels

            # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            clean_question_labels(meta)
            clean_value_labels(meta)

            def format_title(title, max_length=70):
                """
                –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫:
                1. –°–Ω–∞—á–∞–ª–∞ –¥–µ–ª–∏—Ç –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º (—Ç–æ—á–∫–∞/–≤–æ–ø—Ä–æ—Å)
                2. –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª–∏–Ω–Ω—ã–µ - –¥–µ–ª–∏—Ç –ø–æ —Å–ª–æ–≤–∞–º
                """
                def split_sentence(sentence, max_len):
                    """–î–µ–ª–∏—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Å–ª–æ–≤–∞–º"""
                    words = sentence.split()
                    lines = []
                    current_line = []
                    for word in words:
                        if len(' '.join(current_line + [word])) <= max_len:
                            current_line.append(word)
                        else:
                            if current_line:
                                lines.append(' '.join(current_line))
                            current_line = [word]
                    if current_line:
                        lines.append(' '.join(current_line))
                    return '\n'.join(lines)
                # –®–∞–≥ 1: –î–µ–ª–∏–º –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                sentences = re.split(r'(?<=[.!?])\s+', title)
                processed_lines = []
                for sentence in sentences:
                    if len(sentence) <= max_length:
                        processed_lines.append(sentence)
                    else:
                        # –®–∞–≥ 2: –î–µ–ª–∏–º –¥–ª–∏–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Å–ª–æ–≤–∞–º
                        processed_lines.append(split_sentence(sentence, max_length))
                # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                result = '\n'.join(processed_lines)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ª—É—á–∏–ª–∏—Å—å –ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
                final_lines = []
                for line in result.split('\n'):
                    if len(line) > max_length:
                        final_lines.extend(split_sentence(line, max_length).split('\n'))
                    else:
                        final_lines.append(line)
                return '\n'.join(final_lines)

            def split_string_by_length(text, max_length=50, max_lines=None):
                """
                –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫:
                1. –°–Ω–∞—á–∞–ª–∞ –¥–µ–ª–∏—Ç –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º (—Ç–æ—á–∫–∞/–≤–æ–ø—Ä–æ—Å)
                2. –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª–∏–Ω–Ω—ã–µ - –¥–µ–ª–∏—Ç –ø–æ —Å–ª–æ–≤–∞–º
                """
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è max_lines=0
                if max_lines is not None and max_lines == 0:
                    return '...'
                words = text.split(' ')
                lines = []
                current_line = []
                was_truncated = False  # –§–ª–∞–≥ –æ–±—Ä–µ–∑–∫–∏ —Ç–µ–∫—Å—Ç–∞
                for word in words:
                    if len(' '.join(current_line + [word])) <= max_length:
                        current_line.append(word)
                    else:
                        lines.append(' '.join(current_line))
                        current_line = [word]
                        if max_lines is not None and len(lines) >= max_lines:
                            was_truncated = True
                            break
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É (–µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –æ–±—Ä–µ–∑–∫–∏)
                if current_line and not was_truncated and (max_lines is None or len(lines) < max_lines):
                    lines.append(' '.join(current_line))
                # –î–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ –ø—Ä–∏ –æ–±—Ä–µ–∑–∫–µ
                if max_lines is not None:
                    if was_truncated or len(lines) > max_lines:
                        lines = lines[:max_lines]
                        if lines:
                            if not lines[-1].endswith('...'):
                                last_line = lines[-1]
                                max_line_length = max_length - 3
                                if len(last_line) > max_line_length:
                                    last_line = last_line[:max_line_length].rstrip()
                                lines[-1] = last_line + '...'
                                was_truncated = True
                    elif len(lines) == max_lines and len(' '.join(words)) > len(' '.join(lines)):
                        if not lines[-1].endswith('...'):
                            lines[-1] = lines[-1] + '...'
                return '\n'.join(lines) if lines else '...'

            def get_max_line_length(formatted_text):
                """
                –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ —Ç–µ–∫—Å—Ç–∞.
                –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
                    formatted_text (str): –¢–µ–∫—Å—Ç —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫ (—Ä–µ–∑—É–ª—å—Ç–∞—Ç split_string_by_length)
                –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
                    int: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏ (–≤ —Å–∏–º–≤–æ–ª–∞—Ö)
                """
                if not formatted_text:
                    return 0
                lines = formatted_text.split('\n')
                max_length = max(len(line) for line in lines)
                return max_length

            def get_hist(col):
              fig, ax = plt.subplots(figsize=(9, 5))
              question = meta.column_names_to_labels[col]
              question = format_title(question)
              ax = sns.histplot(df[col], kde=False, stat="count", edgecolor="white", alpha=1, color='#E62083')
              plt.gca().yaxis.set_major_formatter(plt.FuncFormatter(lambda y, _: f'{y/n_resp*100:.1f}'))
              plt.title(f'{question}', fontsize=14, pad=10)
              plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ (–≤ %)', fontsize=10)
              plt.xticks(fontsize=10)
              plt.yticks(fontsize=10)
              plt.xlabel('')
              plt.grid(axis='y', alpha=0.3)
              plt.gca().yaxis.set_tick_params(length=0)
              ax.spines['top'].set_visible(False)
              ax.spines['right'].set_visible(False)
              #ax.spines['bottom'].set_visible(False)
              ax.spines['left'].set_visible(False)
              return fig

            def get_piechart(col):
              data = process_multi_response_1(col)
              plot_df=data.value_counts().div(n_resp/100)
              plot_df = pd.DataFrame(plot_df)
              plot_df.reset_index(names=['–û—Ç–≤–µ—Ç'], inplace=True)
              plot_df['ans'] = plot_df['–û—Ç–≤–µ—Ç']
              plot_df['ans'] = plot_df['ans'].apply(lambda x: 0 if x < 90 else x)
              if classify_question_optimized(col) != "–®–∫–∞–ª—å–Ω—ã–π":
                plot_df.sort_values(by=['ans', 'count'], ascending = [True, False], inplace=True)
              plot_df['color'] = plot_df['ans'].apply(lambda x: '#E62083' if x == 0 else '#bfbfbf') #E62083 #12AFFF #bfbfbf
              if col in meta.variable_value_labels:
                plot_df['–û—Ç–≤–µ—Ç'] = plot_df['–û—Ç–≤–µ—Ç'].map(lambda x: meta.variable_value_labels[col][x])
                max_lines = 20//len(meta.variable_value_labels[col])
                if max_lines == 0:
                  max_lines = 1
                plot_df['–û—Ç–≤–µ—Ç'] = plot_df['–û—Ç–≤–µ—Ç'].apply(lambda x: split_string_by_length(x, max_lines=max_lines))
              else:
                plot_df['–û—Ç–≤–µ—Ç'] = plot_df['–û—Ç–≤–µ—Ç'].astype('str')
              plot_df['lenth'] = plot_df['–û—Ç–≤–µ—Ç'].apply(lambda x: get_max_line_length(x))
              max_length_ticks = plot_df['lenth'].max()
              # –°–æ–∑–¥–∞–µ–º —Ü–≤–µ—Ç–æ–≤–æ–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
              colors = ['#E62083', '#12AFFF']
              n_sectors = len(plot_df)
              cmap = LinearSegmentedColormap.from_list('custom_gradient', colors, N=n_sectors)
              sector_colors = [cmap(i) for i in np.linspace(0, 1, n_sectors)]
              # –°—Ç—Ä–æ–∏–º –¥–∏–∞–≥—Ä–∞–º–º—É
              fig, ax = plt.subplots(figsize=(5, 5))
              wedges, texts, autotexts = ax.pie(
                  x=plot_df['count'],
                  colors=sector_colors,
                  autopct = lambda p: f'{p:.0f}' if p >= 5 else '',
                  wedgeprops={'linewidth': 1, 'edgecolor': 'white'},
                  startangle=90,
                  counterclock=False
              )
              #wedges[0].set_linewidth(5)
              for autotext in autotexts:
                autotext.set_size(12)            # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
                autotext.set_weight('bold')      # –ñ–∏—Ä–Ω—ã–π
                autotext.set_color('white')      # –ë–µ–ª—ã–π —Ü–≤–µ—Ç
                # autotext.set_bbox({'facecolor': 'black', 'alpha': 0.5})  # –§–æ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
              # –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–µ–Ω–¥—É —Å –ø–æ–¥–ø–∏—Å—è–º–∏ –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ '–û—Ç–≤–µ—Ç'
              ax.legend(
                  wedges,                      # –°–µ–∫—Ç–æ—Ä–∞ –¥–∏–∞–≥—Ä–∞–º–º—ã
                  plot_df['–û—Ç–≤–µ—Ç'],            # –ü–æ–¥–ø–∏—Å–∏ –¥–ª—è –ª–µ–≥–µ–Ω–¥—ã
                  #title="–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤",    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ª–µ–≥–µ–Ω–¥—ã
                  loc="center left",           # –ü–æ–∑–∏—Ü–∏—è –ª–µ–≥–µ–Ω–¥—ã
                  bbox_to_anchor=(1, 0.5),     # –í—ã–Ω–æ—Å–∏–º –ª–µ–≥–µ–Ω–¥—É –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –¥–∏–∞–≥—Ä–∞–º–º—ã
                  fontsize=10,
                  frameon=False
              )
              # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
              question = meta.column_names_to_labels[col]
              question = format_title(question)
              x = (max_length_ticks+50)/100
              ax.set_title(f'{question} (–≤ %)', x=x, fontsize=14, pad=10)
              return fig

            def get_barplot(col, is_sorted=True):
              data = process_multi_response_1(col)
              plot_df=data.value_counts().div(n_resp/100)
              plot_df = pd.DataFrame(plot_df)
              plot_df.reset_index(names=['–û—Ç–≤–µ—Ç'], inplace=True)
              plot_df['ans'] = plot_df['–û—Ç–≤–µ—Ç']
              plot_df['ans'] = plot_df['ans'].apply(lambda x: 0 if x < 90 else x)
              if is_sorted:
                plot_df.sort_values(by=['ans', 'count'], ascending = [True, False], inplace=True)
              else:
                plot_df.sort_values(by=['–û—Ç–≤–µ—Ç'], ascending = [True], inplace=True)
              plot_df['color'] = plot_df['ans'].apply(lambda x: '#E62083' if x == 0 else '#bfbfbf') #E62083 #12AFFF #bfbfbf
              if col in meta.variable_value_labels:
                plot_df['–û—Ç–≤–µ—Ç'] = plot_df['–û—Ç–≤–µ—Ç'].map(lambda x: meta.variable_value_labels[col][x])
                max_lines = 20//len(meta.variable_value_labels[col])
                if max_lines == 0:
                  max_lines = 1
                plot_df['–û—Ç–≤–µ—Ç'] = plot_df['–û—Ç–≤–µ—Ç'].apply(lambda x: split_string_by_length(x, max_lines=max_lines))
              else:
                plot_df['–û—Ç–≤–µ—Ç'] = plot_df['–û—Ç–≤–µ—Ç'].astype('str')
              plot_df['lenth'] = plot_df['–û—Ç–≤–µ—Ç'].apply(lambda x: get_max_line_length(x))
              max_length_ticks = plot_df['lenth'].max()
              heigh = 4.5
              if len(plot_df) > 20:
                heigh = len(plot_df) * 0.225
              fig, ax = plt.subplots(figsize=(5, heigh))
              sns.barplot(x=plot_df['count'],
                              y=plot_df.index.astype(str),
                              hue = plot_df.index.astype(str),
                              palette=plot_df['color'].tolist(),
                              legend=False)
              ax.set_yticks(range(len(plot_df)))
              ax.set_yticklabels(plot_df['–û—Ç–≤–µ—Ç'])
              ax.spines['top'].set_visible(False)
              ax.spines['right'].set_visible(False)
              ax.spines['bottom'].set_visible(False)
              for container in ax.containers:
                  ax.bar_label(container,
                              label_type='edge',
                              padding=5,
                              fontsize=10,
                              fmt='%.0f',
                              fontweight='bold',
                              fontfamily='sans-serif')
              plt.xticks([])
              plt.yticks(fontsize=10)
              question = meta.column_names_to_labels[col] # —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
              question = format_title(question)
              x = (50-max_length_ticks)/100
              plt.title(f'{question} (–≤ %)', x=x, fontsize=14, pad=10)
              plt.xlabel('', fontsize=1)
              plt.ylabel('', fontsize=1)
              return fig

            def get_stacked(table_columns):
              questions = []
              for col in table_columns:
                questions.append(meta.column_names_to_labels[col])
              question = commonprefix(questions) # —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
              question = format_title(question)
              question += ' ...'
              long_df = df.melt(
                  value_vars=table_columns,
                  var_name='–í–æ–ø—Ä–æ—Å',
                  value_name='–û—Ç–≤–µ—Ç'
              )
              plot_df = (long_df
                        .groupby(['–í–æ–ø—Ä–æ—Å', '–û—Ç–≤–µ—Ç'])
                        .size()
                        .unstack(fill_value=0)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —à–∏—Ä–æ–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
                        .apply(lambda x: 100 * x / x.sum(), axis=1)  # –ù–æ—Ä–º–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç—Ä–æ–∫–∞–º
                        .stack()
                        .reset_index(name='–î–æ–ª—è (%)'))
              plot_df['–í–æ–ø—Ä–æ—Å'] = plot_df['–í–æ–ø—Ä–æ—Å'].map(lambda x: meta.column_names_to_labels[x])
              plot_df['–í–æ–ø—Ä–æ—Å'] = plot_df['–í–æ–ø—Ä–æ—Å'].map(lambda x: x[len(question)-4:])
              if table_columns[0] in meta.variable_value_labels:
                plot_df['–û—Ç–≤–µ—Ç'] = plot_df['–û—Ç–≤–µ—Ç'].map(lambda x: meta.variable_value_labels[table_columns[0]][x])
              plot_df['lenth'] = plot_df['–í–æ–ø—Ä–æ—Å'].apply(lambda x: get_max_line_length(x))
              max_length_ticks = plot_df['lenth'].max()
              heigh = 4.5
              if len(plot_df) > 20:
                heigh = len(plot_df) * 0.225
              colors = ['#E62083', '#12AFFF']
              n_sectors = len(plot_df['–û—Ç–≤–µ—Ç'].unique())
              cmap = LinearSegmentedColormap.from_list('custom_gradient', colors, N=n_sectors)
              sector_colors = [cmap(i) for i in np.linspace(0, 1, n_sectors)]
              fig, ax = plt.subplots(figsize=(5, heigh))
              sns.barplot(x=plot_df['–î–æ–ª—è (%)'],
                                y=plot_df['–í–æ–ø—Ä–æ—Å'],
                                hue = plot_df['–û—Ç–≤–µ—Ç'],
                                palette=sector_colors,
                                legend=True)
              ax.set_yticks(range(len(table_columns)))
              #x.set_yticklabels(plot_df['–û—Ç–≤–µ—Ç'])
              ax.spines['top'].set_visible(False)
              ax.spines['right'].set_visible(False)
              ax.spines['bottom'].set_visible(False)
              for container in ax.containers:
                  ax.bar_label(container,
                              label_type='edge',
                              padding=5,
                              fontsize=10,
                              fmt='%.0f',
                              fontweight='bold',
                              fontfamily='sans-serif')
              x = (50-max_length_ticks)/100
              plt.legend(
                  title=False,
                  bbox_to_anchor=(x, 0),
                  loc='upper center',
                  ncol=len(plot_df['–û—Ç–≤–µ—Ç'].unique()),
                  frameon=False
              )
              plt.xticks([])
              plt.yticks(fontsize=10)
              plt.title(f'{question} (–≤ %)', x=x, fontsize=14, pad=10)
              plt.xlabel('', fontsize=1)
              plt.ylabel('', fontsize=1)
              return fig

            # –î–∏–∞–≥—Ä–∞–º–º–∞
            if vis_type == "–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞":
              fig = get_hist(col)
            elif vis_type == "–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞":
              fig = get_piechart(col)
            elif vis_type == "–°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞":
              fig = get_barplot(col, is_sorted=False)
            elif vis_type == "–°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π":
              fig = get_barplot(col, is_sorted=True)
            elif vis_type == "–î–∏–∞–≥—Ä–∞–º–º–∞ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π":
              fig = get_stacked(table_columns)
            st.pyplot(fig)

            # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–ø—Ä—è–∂–µ–Ω–Ω–æ—Å—Ç–∏
            def convert_to_intervals(col, df = df):
                '''
               –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–µ
                '''
                if col not in meta.variable_value_labels and df[col].nunique() > 5:
                    if col == 'AGE':
                        bins = [0, 18, 25, 35, 45, 55, 65, float('inf')]
                        labels = ['–¥–æ 18', '18 - 24', '25 - 34', '35 - 44', '45 - 54', '55 - 64', '65+']
                        return pd.cut(df[col], bins = bins, labels=labels, right=False).astype('str')
                    else:
                        binned_col = pd.cut(df[col], bins = 5, right = False, duplicates='drop')
                        return binned_col.apply(lambda x: f'{round(x.left)} - {round(x.right)}').astype('str')
                return df[col]

            def apply_value_labels(series, is_index=True):
                '''
                –ü—Ä–∏–º–µ–Ω—è–µ—Ç –º–µ—Ç–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π –∫ —Å—Ç–æ–ª–±—Ü–∞–º —Ç–∞–±–ª–∏—Ü—ã, –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–∏–≤ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ª–æ–≤–∞
                '''
                words_to_remove = ['(–ù–ï –ó–ê–ß–ò–¢–´–í–ê–¢–¨) ', '(–ó–ê–ß–ò–¢–ê–¢–¨ –ü–û–°–õ–ï –ü–ê–£–ó–´) ', '(–ó–ê–ß–ò–¢–ê–¢–¨) ', '(–ü–û–°–õ–ï –ü–ê–£–ó–´) ']
                pattern = "|".join(map(re.escape, words_to_remove))

                for question, response in meta.variable_value_labels.items():
                    for key, value in response.items():
                        response[key] = re.sub(pattern, '', value)

                if series.name in meta.variable_value_labels:
                    return series.map(lambda x: meta.variable_value_labels[series.name].get(x, x))
                return series
            
            def smart_format(x, precision=4):
                return f"{x:.{precision}f}" if abs(x) >= 0.0001 else f"{x:.2e}"

            def create_crosstab(col1, col2, adjustment_type = 'holm', chi2_threshhold = 0.05, z_threshhold = 0.05, min_n_obs = 10):

                """
                –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å–æ–ø—Ä—è–∂–µ–Ω–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É –¥–≤—É–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–π —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑:
                1. –û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫—É—é —Å–≤—è–∑—å –º–µ–∂–¥—É –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ —Å –ø–æ–º–æ—â—å—é —Ç–µ—Å—Ç–∞ —Ö–∏-–∫–≤–∞–¥—Ä–∞—Ç.
                2. –ï—Å–ª–∏ —Å–≤—è–∑—å –∑–Ω–∞—á–∏–º–∞, –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ —Ä–∞–∑–ª–∏—á–∏–π –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –ø—Ä–æ—Ç–∏–≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é z-—Ç–µ—Å—Ç–∞.
                –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç —è—á–µ–π–∫–∏, —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ª–∏—á–∞—é—â–∏–µ—Å—è –æ—Ç –æ—Å—Ç–∞–ª—å–Ω—ã—Ö.

                Args:
                    col1 (pd.Series): –ü–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü.
                    col2 (pd.Series): –í—Ç–æ—Ä–æ–π —Å—Ç–æ–ª–±–µ—Ü.
                    adjustment_type (str or None): –ú–µ—Ç–æ–¥ –ø–æ–ø—Ä–∞–≤–∫–∏ –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è ('holm', 'bonferroni', 'fdr_bh' –∏ –¥—Ä.). –ï—Å–ª–∏ None, –ø–æ–ø—Ä–∞–≤–∫–∞ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 'holm'.
                    chi2_threshhold (float): –ü–æ—Ä–æ–≥ —É—Ä–æ–≤–Ω—è –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–∞ —Ö–∏-–∫–≤–∞–¥—Ä–∞—Ç. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.1.
                    z_threshhold (float): –ü–æ—Ä–æ–≥ —É—Ä–æ–≤–Ω—è –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ –¥–ª—è z-—Ç–µ—Å—Ç–∞ –ø—Ä–æ–ø–æ—Ä—Ü–∏–π. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.05.
                    min_n_obs (int): –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ –¥–ª—è z-—Ç–µ—Å—Ç–∞.

                Returns:
                    dict: –°–ª–æ–≤–∞—Ä—å —Å –¥–≤—É–º—è –∫–ª—é—á–∞–º–∏:
                        - 'table': —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–ø—Ä—è–∂–µ–Ω–Ω–æ—Å—Ç–∏ (pandas Styler object).
                        - 'notes': —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤—ã–≤–æ–¥ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –≥–∏–ø–æ—Ç–µ–∑
                                –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏.
                """

                # –®–∞–≥ 1: –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–ø—Ä—è–∂—ë–Ω–Ω–æ—Å—Ç–∏

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
                data = process_multi_response(col1, col2)

                # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–µ
                transformed_col1 = convert_to_intervals(col1, data)
                transformed_col2 = convert_to_intervals(col2, data)

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–æ–ø—Ä—è–∂–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤
                contingency_table = pd.crosstab(transformed_col1, transformed_col2)
                contingency_table.index = apply_value_labels(contingency_table.index)
                contingency_table.columns = apply_value_labels(contingency_table.columns)

                # –®–∞–≥ 2: –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ —Ö–∏-–∫–≤–∞–¥—Ä–∞—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
                _, chi2_pvalue, _, expected = chi2_contingency(contingency_table)
                chi2_valid = True

                # !!! –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –æ–∂–∏–¥–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏–µ >= 5 –±–æ–ª–µ–µ —á–µ–º –≤ 80 % —è—á–µ–µ–∫ (–Ω–µ –≤–∫–ª—é—á–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã)

                if chi2_pvalue >= chi2_threshhold:
                    chi2_notes = f'''
                –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –•–∏-–∫–≤–∞–¥—Ä–∞—Ç —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤—É—é—Ç –æ —Ç–æ–º, —á—Ç–æ —Å–≤—è–∑—å –º–µ–∂–¥—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º–æ–π (p = {smart_format(chi2_pvalue)} ‚â• {chi2_threshhold}).
                –í —Å–ª–µ–¥—Å—Ç–≤–∏–µ —ç—Ç–æ–≥–æ –≥—Ä—É–ø–ø–æ–≤—ã–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª–∏—Å—å. \n'''
                    chi2_valid = False
                else:
                    chi2_notes = f'''
                –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –•–∏-–∫–≤–∞–¥—Ä–∞—Ç —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤—É—é—Ç –æ —Ç–æ–º, —á—Ç–æ —Å–≤—è–∑—å –º–µ–∂–¥—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º–æ–π (p = {smart_format(chi2_pvalue)}). \n'''
                    chi2_valid = True

                # –®–∞–≥ 3: –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ z-—Ç–µ—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ —Ä–∞–∑–ª–∏—á–∏–π –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –ø—Ä–æ—Ç–∏–≤ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
   
                    significant_groups = {}
                    detailed_results = []
    
                    for answer in contingency_table.index:
                        z_pvalues = []
                        comparisons = []
                        group_labels = list(contingency_table.columns)
    
                        for group in group_labels:
                            group_success = contingency_table.loc[answer, group]
                            rest_success = contingency_table.loc[answer, :].sum() - group_success
    
                            group_nobs = contingency_table.loc[:, group].sum()
                            rest_nobs = contingency_table.sum().sum() - group_nobs
    
                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π
                            if min([group_success, group_nobs - group_success, rest_success, rest_nobs - rest_success]) <= min_n_obs:
                                continue
    
                            success = [group_success, rest_success]
                            nobs = [group_nobs, rest_nobs]
    
                            zstat, pvalue = proportions_ztest(success, nobs)
                            z_pvalues.append(pvalue)
                            comparisons.append((group, answer, pvalue, zstat))
    
                        # –ü–æ–ø—Ä–∞–≤–∫–∞ –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ –æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                        if z_pvalues:
                            if adjustment_type:
                                _, corr_pvalues, _, _ = multipletests(z_pvalues, method = adjustment_type)
                            else:
                                corr_pvalues = z_pvalues
    
                            for (group, answer, _, zstat), corr_pvalue in zip(comparisons, corr_pvalues):
                                if corr_pvalue < z_threshhold:
                                    significant_groups[(group, answer)] = zstat
                                    detailed_results.append(f'''
                    {group} vs –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç–µ '{answer}': p = {smart_format(corr_pvalue)}''')
    
                    if len(detailed_results) > 0:
                        z_notes = f'''
                    –°–æ–≥–ª–∞—Å–Ω–æ z-—Ç–µ—Å—Ç—É –ø—Ä–æ–ø–æ—Ä—Ü–∏–π, –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º–æ–µ –æ—Ç–ª–∏—á–∏–µ –ø–æ –¥–æ–ª–µ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö. –í —á–∞—Å—Ç–Ω–æ—Å—Ç–∏: {"".join(detailed_results)}'''
                    else:
                        z_notes = f'''
                    –°–æ–≥–ª–∞—Å–Ω–æ z-—Ç–µ—Å—Ç—É –ø—Ä–æ–ø–æ—Ä—Ü–∏–π, —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º—ã—Ö –æ—Ç–ª–∏—á–∏–π –Ω–∞ —É—Ä–æ–≤–Ω–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø –Ω–µ—Ç.'''

                # –®–∞–≥ 4: –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–æ–ø—Ä—è–∂–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫–µ –≤—ã–≤–æ–¥–∞
                crosstab_to_show = pd.crosstab(transformed_col1,
                                    transformed_col2,
                                    margins=True,
                                    margins_name='–í—Å–µ–≥–æ',
                                    normalize = 'columns')

                crosstab_to_show.index = apply_value_labels(crosstab_to_show.index)
                crosstab_to_show.columns = apply_value_labels(crosstab_to_show.columns)

                def highlight_significant_groups(value, index, column):
                    if (column, index) in significant_groups:
                        return 'background-color: #7B68EE' if significant_groups[(column, index)] > 0 else 'background-color: #ffc0cb'
                    return ''

                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ —Ç–∞–±–ª–∏—Ü–µ
                styled_table = crosstab_to_show.style.format(lambda x: round(x*100, 1))\
                                .apply(lambda df: pd.DataFrame([[highlight_significant_groups(df.iloc[i, j], df.index[i], df.columns[j])
                                                    for j in range(df.shape[1])]
                                                    for i in range(df.shape[0])],
                                                    index=df.index, columns=df.columns), axis=None)

                notes =  chi2_notes +  z_notes + \
                f'''
                 –ó–Ω–∞—á–µ–Ω–∏—è –Ω–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ %.
                 –¶–≤–µ—Ç–æ–º –ø–æ–¥—Å–≤–µ—á–µ–Ω—ã —è—á–µ–π–∫–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞–±–ª—é–¥–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø (p < {z_threshhold}).
                 –ï—Å–ª–∏ –¥–æ–ª—è –≥—Ä—É–ø–ø—ã –Ω–∏–∂–µ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —è—á–µ–π–∫–∏ –≤—ã–¥–µ–ª–µ–Ω—ã —Ä–æ–∑–æ–≤—ã–º —Ü–≤–µ—Ç–æ–º, –µ—Å–ª–∏ –¥–æ–ª—è –≥—Ä—É–ø–ø—ã –≤—ã—à–µ - —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–º.
                {f"–¢–µ—Å—Ç—ã —É—á–∏—Ç—ã–≤–∞—é—Ç –ø–æ–ø—Ä–∞–≤–∫—É –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–µ—Ç–æ–¥–æ–º {adjustment_type}" if adjustment_type else '–¢–µ—Å—Ç—ã –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é—Ç—Å—è –ø–æ–ø—Ä–∞–≤–∫–æ–π –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è'}
                '''

                return {'table': styled_table,
                        'notes': notes}

            question2 = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–ø—Ä—è–∂–µ–Ω–Ω–æ—Å—Ç–∏", list_of_questions)
            col2 = meta_inside_out[question2]

            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–æ–≤
            with st.expander("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞", expanded=True):
                st.markdown("–ó–∞–¥–∞–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–∏–ø–æ—Ç–µ–∑:")
            
                # –ë–µ–≥—É–Ω–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ —Ö–∏-–∫–≤–∞–¥—Ä–∞—Ç
                alpha_chi2 = st.slider(
                    "–£—Ä–æ–≤–µ–Ω—å –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–∞ –•–∏-–∫–≤–∞–¥—Ä–∞—Ç",
                    min_value=0.01,
                    max_value=0.10,
                    value=0.05,
                    step=0.01,
                    format="%.2f"
                )
            
                # –ë–µ–≥—É–Ω–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ z-—Ç–µ—Å—Ç–∞
                alpha_z = st.slider(
                    "–£—Ä–æ–≤–µ–Ω—å –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ –¥–ª—è z-—Ç–µ—Å—Ç–∞ –ø—Ä–æ–ø–æ—Ä—Ü–∏–π",
                    min_value=0.01,
                    max_value=0.10,
                    value=0.05,
                    step=0.01,
                    format="%.2%"
                )

                # –í—ã–±–æ—Ä –ø–æ–ø—Ä–∞–≤–∫–∏ –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                adjustment_method = st.selectbox(
                    "–ú–µ—Ç–æ–¥ –ø–æ–ø—Ä–∞–≤–∫–∏ –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è",
                    options=[
                        "–•–æ–ª–º–∞",
                        "–ë–æ–Ω—Ñ–µ—Ä—Ä–æ–Ω–∏",
                        "–ë–µ–Ω—å—è–º–∏–Ω–∏-–•–æ—Ö–±–µ—Ä–≥–∞",
                        "–ë–µ–∑ –ø–æ–ø—Ä–∞–≤–æ–∫"
                    ],
                    index=0
                )

            adjustment_dict = {"–•–æ–ª–º–∞": "holm",
                        "–ë–æ–Ω—Ñ–µ—Ä—Ä–æ–Ω–∏": "bonferroni",
                        "–ë–µ–Ω—å—è–º–∏–Ω–∏-–•–æ—Ö–±–µ—Ä–≥–∞": "fdr_bh",
                        "–ë–µ–∑ –ø–æ–ø—Ä–∞–≤–æ–∫": None}
                        
            adjustment_type = adjustment_dict[adjustment_method]

            result = create_crosstab(col, col2, adjustment_type, alpha_chi2, alpha_z)
            
            st.subheader(f'üßæ –¢–∞–±–ª–∏—Ü–∞ —Å–æ–ø—Ä—è–∂–µ–Ω–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É {col} –∏ {col2}')
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Styler –≤ HTML, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            st.markdown(result['table'].to_html(), unsafe_allow_html=True)
            
            st.markdown("---")
            st.subheader("üìã –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
            # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —á–∞—Å—Ç–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            notes = result['notes'].strip().split("\n")
            note_blocks = {
            "–¢–µ—Å—Ç —Ö–∏-–∫–≤–∞–¥—Ä–∞—Ç": [],
            "Z-—Ç–µ—Å—Ç –ø—Ä–æ–ø–æ—Ä—Ü–∏–π": [],
            "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ": []
            }
            
            current_block = None
            for line in notes:
                line = line.strip()
                if not line:
                    continue
                if "–•–∏-–∫–≤–∞–¥—Ä–∞—Ç" in line:
                    current_block = "–¢–µ—Å—Ç —Ö–∏-–∫–≤–∞–¥—Ä–∞—Ç"
                elif "z-—Ç–µ—Å—Ç" in line:
                    current_block = "Z-—Ç–µ—Å—Ç –ø—Ä–æ–ø–æ—Ä—Ü–∏–π"
                elif "–ó–Ω–∞—á–µ–Ω–∏—è –Ω–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã" in line:
                    current_block = "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ"
                if current_block:
                    note_blocks[current_block].append(line)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–∂–¥—ã–π –±–ª–æ–∫
            for title, lines in note_blocks.items():
                if lines:
                    with st.expander(f"üîπ {title}", expanded=True):
                        for line in lines:
                            st.markdown(f"- {line}")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞: {str(e)}")
